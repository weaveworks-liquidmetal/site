"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7135],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},v=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),v=o,m=p["".concat(s,".").concat(v)]||p[v]||u[v]||r;return t?i.createElement(m,a(a({ref:n},d),{},{components:t})):i.createElement(m,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=v;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}v.displayName="MDXCreateElement"},1946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(7462),o=(t(7294),t(3905));const r={title:"Install and start containerd"},a="Containerd",l={unversionedId:"tutorial-basics/containerd",id:"tutorial-basics/containerd",title:"Install and start containerd",description:"Liquid Metal uses containerd to download and manage the images which are mounted",source:"@site/docs/tutorial-basics/containerd.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/containerd",permalink:"/site/docs/tutorial-basics/containerd",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-basics/containerd.md",tags:[],version:"current",frontMatter:{title:"Install and start containerd"},sidebar:"docs",previous:{title:"Prep the network",permalink:"/site/docs/tutorial-basics/network"},next:{title:"Install and start Flintlockd",permalink:"/site/docs/tutorial-basics/flintlockd"}},s={},c=[{value:"Create thinpool",id:"create-thinpool",level:2},{value:"Configure and start containerd",id:"configure-and-start-containerd",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"containerd"},"Containerd"),(0,o.kt)("p",null,"Liquid Metal uses ",(0,o.kt)("a",{parentName:"p",href:"https://containerd.io/"},(0,o.kt)("inlineCode",{parentName:"a"},"containerd"))," to download and manage the images which are mounted\ninto MicroVMs as kernel and OS volumes."),(0,o.kt)("p",null,"Download the all-in-one provision script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/weaveworks-liquidmetal/flintlock/main/hack/scripts/provision.sh\nchmod +x provision.sh\n")),(0,o.kt)("h2",{id:"create-thinpool"},"Create thinpool"),(0,o.kt)("p",null,"Flintlock relies on containerd's devicemapper snapshotter to provide filesystem\ndevices for Firecracker microvms. This is how the images are stored. In a production\nwe would use a dedicated disk, but here we will use a loopback device."),(0,o.kt)("p",null,"Run the script to create the thinpool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ./provision.sh devpool\n")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[flintlock provision.sh] Creating containerd directory /var/lib/containerd-dev/snapshotter/devmapper\n[flintlock provision.sh] Creating containerd directory /run/containerd-dev\n[flintlock provision.sh] Creating containerd directory /etc/containerd\n[flintlock provision.sh] All containerd directories created\n[flintlock provision.sh] Will create loop-back thinpool flintlock-dev-thinpool\n[flintlock provision.sh] Creating sparse file /var/lib/containerd-dev/snapshotter/devmapper/data of size 100G\n[flintlock provision.sh] Sparse file /var/lib/containerd-dev/snapshotter/devmapper/data created\n[flintlock provision.sh] Creating sparse file /var/lib/containerd-dev/snapshotter/devmapper/metadata of size 10G\n[flintlock provision.sh] Sparse file /var/lib/containerd-dev/snapshotter/devmapper/metadata created\n[flintlock provision.sh] Associating loop devices with sparse files\n[flintlock provision.sh] Loop devices /dev/loop13 and /dev/loop20 associated\n[flintlock provision.sh] Creating thinpool flintlock-dev-thinpool with devices /dev/loop13 and /dev/loop20\n[flintlock provision.sh] Thinpool flintlock-dev-thinpool created\n[flintlock provision.sh] Dev thinpool creation complete\n[flintlock provision.sh] remember to set pool_name to flintlock-dev-thinpool in your containerd config\n"))),(0,o.kt)("p",null,"Verify that the device has been created with ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo dmsetup ls"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"flintlock-dev-thinpool  (253:0)\n")),(0,o.kt)("h2",{id:"configure-and-start-containerd"},"Configure and start containerd"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This section will start ",(0,o.kt)("inlineCode",{parentName:"p"},"containerd")," as a service. If you run ",(0,o.kt)("inlineCode",{parentName:"p"},"docker")," locally,\nyou may already have a ",(0,o.kt)("inlineCode",{parentName:"p"},"containerd")," service running. This new service will run\nparallel to that service and ",(0,o.kt)("em",{parentName:"p"},"should not affect it"),".\nIf you have any doubts or encounter problems, you can disable the original service.")),(0,o.kt)("p",null,"Run the script to install ",(0,o.kt)("inlineCode",{parentName:"p"},"containerd")," in dev mode:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ./provision.sh containerd --dev\n")),(0,o.kt)("p",null,"This command will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Install the latest version of ",(0,o.kt)("inlineCode",{parentName:"li"},"containerd")),(0,o.kt)("li",{parentName:"ul"},"Create various state dirs"),(0,o.kt)("li",{parentName:"ul"},"Save a development config file under ",(0,o.kt)("inlineCode",{parentName:"li"},"/etc/containerd/config-dev.toml")),(0,o.kt)("li",{parentName:"ul"},"Start ",(0,o.kt)("inlineCode",{parentName:"li"},"containerd")," as a ",(0,o.kt)("inlineCode",{parentName:"li"},"systemd")," service")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[flintlock provision.sh] Creating containerd directory /var/lib/containerd-dev/snapshotter/devmapper\n[flintlock provision.sh] Creating containerd directory /run/containerd-dev\n[flintlock provision.sh] Creating containerd directory /etc/containerd\n[flintlock provision.sh] All containerd directories created\n[flintlock provision.sh] Installing containerd version latest to /usr/local/bin\n[flintlock provision.sh] Containerd version v1.6.8 successfully installed\n[flintlock provision.sh] Writing containerd config to /etc/containerd/config-dev.toml\n[flintlock provision.sh] Containerd config saved\n[flintlock provision.sh] Starting containerd service with /etc/systemd/system/containerd-dev.service\n[flintlock provision.sh] Containerd running\n"))),(0,o.kt)("p",null,"Verify that the service started with ",(0,o.kt)("inlineCode",{parentName:"p"},"systemctl status containerd-dev.service"),"."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'\u25cf containerd-dev.service - containerd container runtime\n     Loaded: loaded (/etc/systemd/system/containerd-dev.service; disabled; vendor preset: enabled)\n     Active: active (running) since Tue 2022-09-27 13:02:53 BST; 1s ago\n       Docs: https://containerd.io\n    Process: 777843 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)\n   Main PID: 777844 (containerd)\n      Tasks: 14\n     Memory: 19.6M\n        CPU: 101ms\n     CGroup: /system.slice/containerd-dev.service\n             \u2514\u2500777844 /usr/local/bin/containerd --config /etc/containerd/config-dev.toml\n\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048720119+01:00" level=info msg="Start snapshots syncer"\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048728525+01:00" level=info msg="Start cni network conf syncer for default"\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048735830+01:00" level=info msg="Start streaming server"\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048741460+01:00" level=info msg=serving... address="127.0.0.1:1338"\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048804854+01:00" level=info msg=serving... address=/run/containerd-dev/containerd.sock.ttrpc\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048845976+01:00" level=info msg=serving... address=/run/containerd-dev/containerd.sock\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048894187+01:00" level=debug msg="sd notification" error="<nil>" notified=true state="READY=1"\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.048917346+01:00" level=info msg="containerd successfully booted in 0.033546s"\nSep 27 13:02:53 callisto-XPS systemd[1]: Started containerd container runtime.\nSep 27 13:02:53 callisto-XPS containerd[777844]: time="2022-09-27T13:02:53.154115708+01:00" level=debug msg="garbage collected" d=6.658119ms\n...\n'))),(0,o.kt)("p",null,"Now we can move on to installing flintlock."))}u.isMDXComponent=!0}}]);