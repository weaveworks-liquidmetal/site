"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4975],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(a),d=r,k=u["".concat(p,".").concat(d)]||u[d]||c[d]||i;return a?n.createElement(k,o(o({ref:t},s),{},{components:a})):n.createElement(k,o({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1126:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=a(7462),r=(a(7294),a(3905));const i={title:"Provision the infrastructure"},o=void 0,l={unversionedId:"tutorial-equinix/terraform",id:"tutorial-equinix/terraform",title:"Provision the infrastructure",description:"We will use terraform to create some devices in Equinix.",source:"@site/docs/tutorial-equinix/terraform.md",sourceDirName:"tutorial-equinix",slug:"/tutorial-equinix/terraform",permalink:"/site/docs/tutorial-equinix/terraform",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-equinix/terraform.md",tags:[],version:"current",frontMatter:{title:"Provision the infrastructure"},sidebar:"docs",previous:{title:"Overview",permalink:"/site/docs/tutorial-equinix/intro"},next:{title:"Inspect the environment",permalink:"/site/docs/tutorial-equinix/inspect"}},p={},m=[{value:"Configure",id:"configure",level:2},{value:"Apply",id:"apply",level:2},{value:"Approve the subnet routes",id:"approve-the-subnet-routes",level:3},{value:"Test",id:"test",level:2}],s={toc:m},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We will use terraform to create some devices in Equinix."),(0,r.kt)("h2",{id:"configure"},"Configure"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new local directory and change into it:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir lm-equinix\ncd lm-equinix\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Generate an API key for both Equinix and Tailscale.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new SSH key pair:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ssh-keygen -t ed25519 -f lm-key -N ""\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Connect your local machine to Tailscale:"),(0,r.kt)("p",{parentName:"li"},"For Linux users:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo tailscale up --accept-routes\n")),(0,r.kt)("p",{parentName:"li"},"For other OS users:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo tailscale up\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the ",(0,r.kt)("a",{parentName:"p",href:"https://metal.equinix.com/developers/docs/libraries/cli/"},"Equinix CLI tool"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Find an Equinix metro with sufficient capacity."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"metal capacity get\n")),(0,r.kt)("p",{parentName:"li"},"Make note of the ",(0,r.kt)("inlineCode",{parentName:"p"},"FACILITY")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PLAN")," which has a ",(0,r.kt)("inlineCode",{parentName:"p"},"normal")," availabity level.\nIn my case I will choose:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"| am6      | c3.small.x86   | normal     |\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Write the following to a ",(0,r.kt)("inlineCode",{parentName:"p"},"main.tf")," file:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Contents"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cat << EOF >main.tf\nmodule "create_devices" {\n  source = "weaveworks-liquidmetal/liquidmetal/equinix"\n  version = "0.0.3"\n\n  metal_auth_token = "my equinix auth token"\n  org_id = "my org id"\n  project_name = "my-lm-project"\n  public_key = "my ssh public key"\n  metro = "your chosen metro"\n  server_type = "your chosen server type"\n}\n\nmodule "provision_hosts" {\n  source = "weaveworks-liquidmetal/liquidmetal/equinix//modules/provision"\n  version = "0.0.3"\n\n  ts_auth_key = "my tailscale auth key"\n  private_key_path = "/path/to/my/private/key"\n\n  vlan_id = module.create_devices.vlan_id\n  network_hub_address = module.create_devices.network_hub_ip\n  microvm_host_addresses = module.create_devices.microvm_host_ips\n  baremetal_host_addresses = module.create_devices.bare_metal_host_ips\n}\n\noutput "network_hub_ip" {\n  value = module.create_devices.network_hub_ip\n  description = "The address of the device created to act as a networking configuration hub"\n}\n\noutput "microvm_host_ips" {\n  value = module.create_devices.microvm_host_ips\n  description = "The addresses of the devices provisioned as flintlock microvm hosts"\n}\nEOF\n')))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Edit these fields in your ",(0,r.kt)("inlineCode",{parentName:"p"},"main.tf"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metal_auth_token"),": ",(0,r.kt)("em",{parentName:"li"},"your API token for Equinix Metal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"org_id"),": ",(0,r.kt)("em",{parentName:"li"},"Your Equinix org id.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project_name"),": ",(0,r.kt)("em",{parentName:"li"},"The name of the project to create.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"public_key"),": ",(0,r.kt)("em",{parentName:"li"},"The contents of the ",(0,r.kt)("inlineCode",{parentName:"em"},".pub")," file you created earlier.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metro"),": ",(0,r.kt)("em",{parentName:"li"},"The metro of the facility you chose from your capacity check earlier.\nIn my case I chose facility ",(0,r.kt)("inlineCode",{parentName:"em"},"am6"),", so my metro will be ",(0,r.kt)("inlineCode",{parentName:"em"},"am"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"server_type"),": ",(0,r.kt)("em",{parentName:"li"},"The plan available in your chosen metro. In my case this is\n",(0,r.kt)("inlineCode",{parentName:"em"},"c3.small.x86"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ts_auth_key"),": ",(0,r.kt)("em",{parentName:"li"},"Your Tailscale auth key.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"private_key_path"),": ",(0,r.kt)("em",{parentName:"li"},"The full path to the private key you generated earlier."))))),(0,r.kt)("h2",{id:"apply"},"Apply"),(0,r.kt)("p",null,"Once your variables are configured, apply the plan:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"terraform init\nterraform plan\nterraform apply\n")),(0,r.kt)("p",null,"This make take a few minutes."),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"apply")," is complete, take a note of the following outputs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"network_hub_ip")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"microvm_host_ips"))),(0,r.kt)("h3",{id:"approve-the-subnet-routes"},"Approve the subnet routes"),(0,r.kt)("p",null,"Once your ",(0,r.kt)("inlineCode",{parentName:"p"},"network-hub")," host is provisioned, navigate to your ",(0,r.kt)("a",{parentName:"p",href:"https://login.tailscale.com/admin/machines"},"Tailscale dash"),", and\nlocate your ",(0,r.kt)("inlineCode",{parentName:"p"},"network-hub")," machine which should have come online in your network. Select\nthe machine."),(0,r.kt)("p",null,"On the machine page, click Review under the 'Subnets' section, and toggle your range to 'enabled'."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This bit is easy to overlook or forget, so I am highlighting here for extra clarity!")),(0,r.kt)("h2",{id:"test"},"Test"),(0,r.kt)("p",null,"To verify the ",(0,r.kt)("inlineCode",{parentName:"p"},"flintlockd")," services are ready to accept requests, you can use either ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/fl"},(0,r.kt)("inlineCode",{parentName:"a"},"fl"))," or\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/warehouse-13/hammertime"},(0,r.kt)("inlineCode",{parentName:"a"},"hammertime"))," to perform simple queries against the ",(0,r.kt)("inlineCode",{parentName:"p"},"microvm_host_ips")," returned\nby the terraform:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"hammertime list -a <address>:9090\n\nfl microvm get --host <address>:9090\n")))}c.isMDXComponent=!0}}]);