"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[841],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1352:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="Create a Liquid Metal cluster",i={unversionedId:"tutorial-basics/create",id:"tutorial-basics/create",title:"Create a Liquid Metal cluster",description:"We will use clusterctl again to generate a manifest for our workload cluster.",source:"@site/docs/tutorial-basics/create.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/create",permalink:"/site/docs/tutorial-basics/create",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-basics/create.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Provision a CAPI management cluster",permalink:"/site/docs/tutorial-basics/capi"},next:{title:"Inspect the environment",permalink:"/site/docs/tutorial-basics/inspect"}},s={},c=[{value:"Configure",id:"configure",level:2},{value:"Generate",id:"generate",level:2},{value:"Apply",id:"apply",level:2},{value:"Use",id:"use",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-liquid-metal-cluster"},"Create a Liquid Metal cluster"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("inlineCode",{parentName:"p"},"clusterctl")," again to generate a manifest for our workload cluster."),(0,r.kt)("h2",{id:"configure"},"Configure"),(0,r.kt)("p",null,"First, we need to configure some options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export CLUSTER_NAME=lm-demo\nexport CONTROL_PLANE_MACHINE_COUNT=1\nexport WORKER_MACHINE_COUNT=5\n")),(0,r.kt)("p",null,"This will result in a cluster with a single control plane, and 5 worker nodes.\nYou may change these values to whatever you wish."),(0,r.kt)("p",null,"CAPMVM will use ",(0,r.kt)("a",{parentName:"p",href:"https://kube-vip.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"kube-vip"))," to assign a virtual IP to our Liquid Metal\ncluster. Choose an address from ",(0,r.kt)("strong",{parentName:"p"},"outside")," the range we set as the ",(0,r.kt)("inlineCode",{parentName:"p"},"dhcp")," pool\nback in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial-basics/network"},(0,r.kt)("inlineCode",{parentName:"a"},"Prep the network"))," section. In my\ncase I did not make any changes to the XML example file, so I will use ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.100.9"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export CONTROL_PLANE_VIP="192.168.100.9" # update to suit your network\n')),(0,r.kt)("p",null,"Lastly we set the address that the ",(0,r.kt)("inlineCode",{parentName:"p"},"flintlockd")," service we started earlier is\nlistening on. We set the address to ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.0.0"),", so the endpoint here will be the\ninternal IP of the machine you are running on attached to the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," interface.\nYou can discover this with either ",(0,r.kt)("inlineCode",{parentName:"p"},"hostname -I")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ip link ls"),".\nIn my case this is ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.1.130"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export HOST_ENDPOINT="192.168.1.130:9090" # don\'t forget to include the port!\n')),(0,r.kt)("h2",{id:"generate"},"Generate"),(0,r.kt)("p",null,"Now we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"clusterctl")," to generate a cluster manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"clusterctl generate cluster -i microvm:$CAPMVM_VERSION -f cilium $CLUSTER_NAME > cluster.yaml\n")),(0,r.kt)("p",null,"We need to edit the file to change the network mode for the created MicroVMs. You'll\nrecall that one of the reasons we ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial-basics/network"},"created our own network")," was so that MicroVMs\ncan be accessed from the same machine they were created on.\nTo do this we need to ensure that MicroVMs are created with the correct network\ninterface type."),(0,r.kt)("p",null,"This can be configured on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/weaveworks-liquidmetal/cluster-api-provider-microvm/blob/42196e0bf388235f39211769cb8e5c0049172c10/api/v1alpha1/types.go#L103-L105"},(0,r.kt)("inlineCode",{parentName:"a"},"MicrovmMachineTemplate"))," spec at\n",(0,r.kt)("inlineCode",{parentName:"p"},"spec.template.spec.networkInterfaces[0].type"),".\nThere will be 2 instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"MicrovmMachineTemplate"),", one named ",(0,r.kt)("inlineCode",{parentName:"p"},"lm-demo-control-plane"),"\nand the other ",(0,r.kt)("inlineCode",{parentName:"p"},"lm-demo-md-0"),". Change both ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"s for the ",(0,r.kt)("inlineCode",{parentName:"p"},"eth1")," network interface\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"macvtap")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"tap"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Expand to see required file changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\nkind: MicrovmMachineTemplate\nmetadata:\n  name: lm-demo-control-plane\n  namespace: default\nspec:\n  template:\n    spec:\n      kernel:\n        filename: boot/vmlinux\n        image: ghcr.io/weaveworks-liquidmetal/flintlock-kernel:5.10.77\n      kernelCmdline: {}\n      memoryMb: 2048\n      networkInterfaces:\n      - guestDeviceName: eth1\n        type: tap # <- this should be tap\n...\n---\napiVersion: infrastructure.cluster.x-k8s.io/v1alpha1\nkind: MicrovmMachineTemplate\nmetadata:\n  name: lm-demo-md-0\n  namespace: default\nspec:\n  template:\n    spec:\n      kernel:\n        filename: boot/vmlinux\n        image: ghcr.io/weaveworks-liquidmetal/flintlock-kernel:5.10.77\n      kernelCmdline: {}\n      memoryMb: 2048\n      networkInterfaces:\n      - guestDeviceName: eth1\n        type: tap # <- this should be tap\n...\n"))),(0,r.kt)("p",null,"Once you have made those changes, save and close the file."),(0,r.kt)("h2",{id:"apply"},"Apply"),(0,r.kt)("p",null,"Once you are happy with the manifest, use ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/tools/"},(0,r.kt)("inlineCode",{parentName:"a"},"kubectl"))," to apply it to your management\ncluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f cluster.yaml\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cluster.cluster.x-k8s.io/lm-demo created\nmicrovmcluster.infrastructure.cluster.x-k8s.io/lm-demo created\nkubeadmcontrolplane.controlplane.cluster.x-k8s.io/lm-demo-control-plane created\nmicrovmmachinetemplate.infrastructure.cluster.x-k8s.io/lm-demo-control-plane created\nmachinedeployment.cluster.x-k8s.io/lm-demo-md-0 created\nmicrovmmachinetemplate.infrastructure.cluster.x-k8s.io/lm-demo-md-0 created\nkubeadmconfigtemplate.bootstrap.cluster.x-k8s.io/lm-demo-md-0 created\nclusterresourceset.addons.cluster.x-k8s.io/crs-cilium created\nconfigmap/cilium-addon created\n"))),(0,r.kt)("h2",{id:"use"},"Use"),(0,r.kt)("p",null,"After a moment, you can fetch the MicroVMs workload cluster's ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," from\nyour management cluster. This ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," is written to a secret by CAPI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret $CLUSTER_NAME-kubeconfig -o json | jq -r .data.value | base64 -d > config.yaml\n")),(0,r.kt)("p",null,"With that ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," we can target the Liquid Metal cluster with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --kubeconfig config.yaml get nodes\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This may not return anything for a few moments; we need to wait for the MicroVMs\nto start and for the cluster control-plane to then be bootstrapped.\nPrepend the command with ",(0,r.kt)("inlineCode",{parentName:"p"},"watch")," and eventually (<=5m) you\nwill see the errors stop and the cluster come up."),(0,r.kt)("p",{parentName:"admonition"},"An expected error for the first 2-3 minutes is:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"Unable to connect to the server: dial tcp 192.168.100.9:6443: connect: no route to host\n"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NAME                          STATUS   ROLES                  AGE     VERSION\nlm-demo-control-plane-hdpkj   Ready    control-plane,master   4m35s   v1.21.8\nlm-demo-md-0-9444f            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-bdqwj            Ready    <none>                 3m43s   v1.21.8\nlm-demo-md-0-gfgbq            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-pxkk6            Ready    <none>                 3m41s   v1.21.8\nlm-demo-md-0-qpzwn            Ready    <none>                 3m43s   v1.21.8\n"))),(0,r.kt)("p",null,"Continue to the next page to learn how to inspect the environment and see what a Liquid\nMetal Platform and Cluster look like in action."))}u.isMDXComponent=!0}}]);