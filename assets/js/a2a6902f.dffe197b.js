"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9119],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(k,o(o({ref:t},p),{},{components:n})):r.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o="Inspect the environment",l={unversionedId:"tutorial-basics/inspect",id:"tutorial-basics/inspect",title:"Inspect the environment",description:"Here are some steps you can take to see what is happening on your machine when",source:"@site/docs/tutorial-basics/inspect.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/inspect",permalink:"/site/docs/tutorial-basics/inspect",draft:!1,editUrl:"https://github.com/weaveworks-liquidmetal/site/tree/main/docs/tutorial-basics/inspect.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Create a Liquid Metal cluster",permalink:"/site/docs/tutorial-basics/create"},next:{title:"Teardown",permalink:"/site/docs/tutorial-basics/teardown"}},s={},c=[{value:"CAPMVM &amp; CAPI",id:"capmvm--capi",level:2},{value:"Flintlock",id:"flintlock",level:2},{value:"Firecracker",id:"firecracker",level:2},{value:"Containerd",id:"containerd",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"DHCP address leases",id:"dhcp-address-leases",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"inspect-the-environment"},"Inspect the environment"),(0,a.kt)("p",null,"Here are some steps you can take to see what is happening on your machine when\na Liquid Metal cluster is running."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This section is not a required part of the workshop. Click ahead to the next page to see\nhow to tear down your setup.")),(0,a.kt)("h2",{id:"capmvm--capi"},"CAPMVM & CAPI"),(0,a.kt)("p",null,"The Cluster API Provider MicroVM is running in the ",(0,a.kt)("inlineCode",{parentName:"p"},"kind")," management cluster alongside\nthe standard CAPI controllers."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We recommend using ",(0,a.kt)("a",{parentName:"p",href:"https://k9scli.io/"},"k9s")," to view your management cluster.")),(0,a.kt)("p",null,"To see the controller logs, look for the pod called ",(0,a.kt)("inlineCode",{parentName:"p"},"capmvm-controller-manager-XXXXX")," in\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"capmvm-system")," namespace. In those logs you will be able to see the controller\nreconcile ",(0,a.kt)("inlineCode",{parentName:"p"},"MicrovmMachine")," types and connect to the given flintlock host(s) to\ncreate MicroVMs."),(0,a.kt)("p",null,"Various CAPI controllers are also running:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The logs of ",(0,a.kt)("inlineCode",{parentName:"li"},"capi-controller-manager-XXXX")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"capi-system")," will show\nyou the overall orchestration of the workload cluster."),(0,a.kt)("li",{parentName:"ul"},"The logs of ",(0,a.kt)("inlineCode",{parentName:"li"},"capi-kubeadm-control-plane-controller-manager-XXXX")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"capi-kubeadm-control-plane-system"),"\nwill show the bootstrapping of the first created MicroVM as a control-plane node."),(0,a.kt)("li",{parentName:"ul"},"The logs of ",(0,a.kt)("inlineCode",{parentName:"li"},"capi-kubeadm-bootstrap-controller-manager-XXXX")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"capi-kubeadm-bootstrap-system"),"\nwill show the bootstrapping of all subsequent MicroVMs as worker nodes.")),(0,a.kt)("h2",{id:"flintlock"},"Flintlock"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"flintlockd")," logs will be followable with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -fu flintlockd.service\n")),(0,a.kt)("p",null,"Data and logs for each MicroVM will be stored under ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/lib/flintlock/vm"),", with\nthe full path for a MicroVM being ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/lib/flintlock/vm/NAMESPACE/NAME/UUID"),"."),(0,a.kt)("p",null,"Under that directory are the following files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"firecracker.cfg"),": the configuration set by ",(0,a.kt)("inlineCode",{parentName:"li"},"flintlock")," for ",(0,a.kt)("inlineCode",{parentName:"li"},"firecracker")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"firecracker.log"),": logs from the firecracker process"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"firecracker.metrics"),": metrics from the firecracker process"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"firecracker.pid"),": the pid of the running firecracker process"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"firecracker.stderr"),": MicroVM boot errors"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"firecracker.stdout"),": MicroVM boot logs"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metadata.json"),": MicroVM boot userdata")),(0,a.kt)("h2",{id:"firecracker"},"Firecracker"),(0,a.kt)("p",null,"Each MicroVM runs as a detached ",(0,a.kt)("inlineCode",{parentName:"p"},"firecracker")," process. You will find logs in the\nfiles given in the section above."),(0,a.kt)("p",null,"To see the processes, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ps aux | grep firecracker\n")),(0,a.kt)("h2",{id:"containerd"},"Containerd"),(0,a.kt)("p",null,"Liquid Metal uses containerd to pull and snapshot volume images which are used\nfor mounting in the kernel and operating system."),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"ctr")," to inspect artifacts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# leases are a reference to other resources connected to an object created by a client\nsudo ctr -n flintlock -a /run/containerd-dev/containerd.sock leases ls\n\n# images are the bases images for snapshots\nsudo ctr -n flintlock -a /run/containerd-dev/containerd.sock images ls\n\n# snapshots and microvm configuration are stored in the content store\nsudo ctr -n flintlock -a /run/containerd-dev/containerd.sock content ls\n")),(0,a.kt)("h2",{id:"interfaces"},"Interfaces"),(0,a.kt)("p",null,"Flintlock will create 2 interfaces per MicroVM connected to the ",(0,a.kt)("inlineCode",{parentName:"p"},"lmbr0")," bridge.\nThese can be seen with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ip link ls\n")),(0,a.kt)("h2",{id:"dhcp-address-leases"},"DHCP address leases"),(0,a.kt)("p",null,"Each MicroVM requests an address from the DHCP server on the network on boot.\nIn our case we set all MicroVMs to be created on the ",(0,a.kt)("inlineCode",{parentName:"p"},"liquid-metal")," virtual\nnetwork via the ",(0,a.kt)("inlineCode",{parentName:"p"},"lmbr0")," bridge. This network has its own ",(0,a.kt)("inlineCode",{parentName:"p"},"dhcp")," range, and\nwe can use ",(0,a.kt)("inlineCode",{parentName:"p"},"virsh")," to inspect the leases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo virsh net-dhcp-leases liquid-metal\n")),(0,a.kt)("p",null,"Continue to the next page to cleanly tear down your Liquid Metal cluster and platform environment."))}u.isMDXComponent=!0}}]);